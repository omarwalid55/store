Distributed Git
Now that you have a remote Git repository set up as a focal point for all the developers to share
their code, and you’re familiar with basic Git commands in a local workflow, you’ll look at how to
utilize some of the distributed workflows that Git affords you.
In this chapter, you’ll see how to work with Git in a distributed environment as a contributor and
an integrator. That is, you’ll learn how to contribute code successfully to a project and make it as
easy on you and the project maintainer as possible, and also how to maintain a project successfully
with a number of developers contributing.
Distributed Workflows
Unlike Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be
far more flexible in how developers collaborate on projects. In centralized systems, every
developer is a node working more or less equally on a central hub. In Git, however, every
developer is potentially both a node and a hub — that is, every developer can both contribute code
to other repositories and maintain a public repository on which others can base their work and
which they can contribute to. This opens a vast range of workflow possibilities for your project
and/or your team, so we’ll cover a few common paradigms that take advantage of this flexibility.
We’ll go over the strengths and possible weaknesses of each design; you can choose a single one to
use, or you can mix and match features from each.
Centralized Workflow
In centralized systems, there is generally a single collaboration model — the centralized workflow.
One central hub, or repository, can accept code, and everyone synchronizes their work to it. A
number of developers are nodes — consumers of that hub — and synchronize to that one place.
Figure 54. Centralized workflow.
This means that if two developers clone from the hub and both make changes, the first developer to
push their changes back up can do so with no problems. The second developer must merge in the
first one’s work before pushing changes up, so as not to overwrite the first developer’s changes.